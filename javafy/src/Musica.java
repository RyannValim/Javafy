import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Objects;

public class Musica {
    // Atributos
    private Artista artista;
    private String tituloMusica;
    private String generoMusica;
    private int duracaoMusica; // DECIDIDO: int para segundos
    private final LocalDate dataLancamentoMusica;

    // Construtor
    public Musica(Artista artista, String tituloMusica, String generoMusica, int duracaoMusica, LocalDate dataLancamentoMusica) {
        // Valida√ß√µes b√°sicas (opcionais, mas boas pr√°ticas)
        if (artista == null) {
            throw new IllegalArgumentException("A m√∫sica deve ter um artista.");
        }
        if (tituloMusica == null || tituloMusica.trim().isEmpty()) {
            throw new IllegalArgumentException("O t√≠tulo da m√∫sica n√£o pode ser vazio.");
        }
        if (generoMusica == null || generoMusica.trim().isEmpty()) {
            throw new IllegalArgumentException("O g√™nero da m√∫sica n√£o pode ser vazio.");
        }
        if (duracaoMusica < 0) { // Dura√ß√£o n√£o pode ser negativa
            throw new IllegalArgumentException("A dura√ß√£o da m√∫sica n√£o pode ser negativa.");
        }
        if (dataLancamentoMusica == null) {
            throw new IllegalArgumentException("A data de lan√ßamento da m√∫sica n√£o pode ser nula.");
        }

        this.artista = artista;
        this.tituloMusica = tituloMusica;
        this.generoMusica = generoMusica;
        this.duracaoMusica = duracaoMusica;
        this.dataLancamentoMusica = dataLancamentoMusica;
    }

    // Getters e Setters
    public Artista getArtista() {
        return artista;
    }
    public void setArtista(Artista artista) {
        if (artista == null) {
            System.out.println("Erro: O artista n√£o pode ser nulo.");
            return;
        }
        this.artista = artista;
    }

    public String getTituloMusica() {
        return tituloMusica;
    }
    public void setTituloMusica(String tituloMusica) {
        if (tituloMusica == null || tituloMusica.trim().isEmpty()) {
            System.out.println("Erro: O t√≠tulo da m√∫sica n√£o pode ser vazio.");
            return;
        }
        this.tituloMusica = tituloMusica;
    }

    public String getGeneroMusica() {
        return generoMusica;
    }
    public void setGeneroMusica(String generoMusica) {
        if (generoMusica == null || generoMusica.trim().isEmpty()) {
            System.out.println("Erro: O g√™nero da m√∫sica n√£o pode ser vazio.");
            return;
        }
        this.generoMusica = generoMusica;
    }

    // Getter para a dura√ß√£o em segundos (int)
    public int getDuracaoMusica() {
        return duracaoMusica;
    }
    // Setter para a dura√ß√£o em segundos (int)
    public void setDuracaoMusica(int duracaoMusica) {
        if (duracaoMusica < 0) {
            System.out.println("Erro: A dura√ß√£o da m√∫sica n√£o pode ser negativa.");
            return;
        }
        this.duracaoMusica = duracaoMusica;
    }

    // Getter para a data de lan√ßamento formatada para exibi√ß√£o (String)
    public String getDataLancamentoMusicaFormatada() {
        return dataLancamentoMusica.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
    }
    
    // Getter para o objeto LocalDate cru, se necess√°rio
    public LocalDate getLocalDateLancamentoMusica() {
        return dataLancamentoMusica;
    }

    // O M√âTODO QUE EST√Å FALTANDO OU COM PROBLEMAS DE COMPILA√á√ÉO
    public String getDuracaoMusicaEmFormatoMMSS() {
        int minutos = duracaoMusica / 60;
        int segundos = duracaoMusica % 60;
        return String.format("%02d:%02d", minutos, segundos); // Formata para 05:35, 03:29, etc.
    }

    // M√©todos
    public void exibirInfo() {
        System.out.println("\nüéµ Informa√ß√µes da M√∫sica:");
        System.out.println("T√≠tulo: " + tituloMusica);
        System.out.println("Artista: " + artista.getNome());
        System.out.println("G√™nero: " + generoMusica);
        System.out.println("Dura√ß√£o: " + getDuracaoMusicaEmFormatoMMSS()); // Usando o m√©todo formatado
        System.out.println("Data de Lan√ßamento: " + getDataLancamentoMusicaFormatada());
        System.out.println("-----------------------------");
    }

    @Override
    public String toString() {
        return "T√≠tulo: " + tituloMusica +
               " | Artista: " + artista.getNome() +
               " | G√™nero: " + generoMusica +
               " | Dura√ß√£o: " + getDuracaoMusicaEmFormatoMMSS(); // Usando o m√©todo formatado
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Musica musica = (Musica) o;
        return tituloMusica.equalsIgnoreCase(musica.tituloMusica) &&
               Objects.equals(artista, musica.artista) &&
               generoMusica.equalsIgnoreCase(musica.generoMusica) &&
               duracaoMusica == musica.duracaoMusica;
    }

    @Override
    public int hashCode() {
        return Objects.hash(tituloMusica.toLowerCase(), artista, generoMusica.toLowerCase(), duracaoMusica);
    }
}